{"ast":null,"code":"var _jsxFileName = \"/Users/palehazy/Documents/Projects/project-3/client/src/components/chatbot/chatbot.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChatBot, { Loading } from \"react-simple-chatbot\";\n\nclass DBPedia extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      result: \"\",\n      trigger: false\n    };\n    this.triggetNext = this.triggetNext.bind(this);\n  }\n\n  componentWillMount() {\n    const self = this;\n    const steps = this.props.steps;\n    const search = steps.search.value;\n    const endpoint = encodeURI(\"https://www.wikipedia.org/\");\n    const query = encodeURI(\"\\n      select * where {\\n      ?x rdfs:label \\\"\".concat(search, \"\\\"@en .\\n      ?x rdfs:comment ?comment .\\n      FILTER (lang(?comment) = 'en')\\n      } LIMIT 100\\n    \"));\n    const queryUrl = \"https://wikipedia.org/sparql/?default-graph-uri=\".concat(endpoint, \"&query=\").concat(query, \"&format=json\");\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener(\"readystatechange\", readyStateChange);\n\n    function readyStateChange() {\n      if (this.readyState === 4) {\n        const data = JSON.parse(this.responseText);\n        const bindings = data.results.bindings;\n\n        if (bindings && bindings.length > 0) {\n          self.setState({\n            loading: false,\n            result: bindings[0].comment.value\n          });\n        } else {\n          self.setState({\n            loading: false,\n            result: \"Not found.\"\n          });\n        }\n      }\n    }\n\n    xhr.open(\"GET\", queryUrl);\n    xhr.send();\n  }\n\n  triggetNext() {\n    this.setState({\n      trigger: true\n    }, () => {\n      console.log(this.props);\n      this.props.triggerNextStep();\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          trigger = _this$state.trigger,\n          loading = _this$state.loading,\n          result = _this$state.result;\n    return React.createElement(\"div\", {\n      className: \"dbpedia\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : result, !loading && React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Fucke the po\"), !trigger && React.createElement(\"button\", {\n      onClick: () => this.triggetNext(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Search Again\")));\n  }\n\n}\n\nDBPedia.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func\n};\nDBPedia.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined\n};\n\nconst ChatbotPedia = () => React.createElement(ChatBot, {\n  steps: [{\n    id: \"1\",\n    message: \"Would you like to research any of the technologies in this site? ex. React JS\",\n    trigger: \"search\"\n  }, {\n    id: \"search\",\n    user: true,\n    trigger: \"3\"\n  }, {\n    id: \"3\",\n    component: React.createElement(DBPedia, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }),\n    waitAction: true,\n    trigger: \"1\"\n  }],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n});\n\nexport default ChatbotPedia;","map":{"version":3,"sources":["/Users/palehazy/Documents/Projects/project-3/client/src/components/chatbot/chatbot.jsx"],"names":["React","Component","PropTypes","ChatBot","Loading","DBPedia","constructor","props","state","loading","result","trigger","triggetNext","bind","componentWillMount","self","steps","search","value","endpoint","encodeURI","query","queryUrl","xhr","XMLHttpRequest","addEventListener","readyStateChange","readyState","data","JSON","parse","responseText","bindings","results","length","setState","comment","open","send","console","log","triggerNextStep","render","textAlign","marginTop","propTypes","object","func","defaultProps","undefined","ChatbotPedia","id","message","user","component","waitAction"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChatBot, { Loading } from \"react-simple-chatbot\";\n\nclass DBPedia extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: \"\",\n      trigger: false\n    };\n\n    this.triggetNext = this.triggetNext.bind(this);\n  }\n\n  componentWillMount() {\n    const self = this;\n    const { steps } = this.props;\n    const search = steps.search.value;\n    const endpoint = encodeURI(\"https://www.wikipedia.org/\");\n    const query = encodeURI(`\n      select * where {\n      ?x rdfs:label \"${search}\"@en .\n      ?x rdfs:comment ?comment .\n      FILTER (lang(?comment) = 'en')\n      } LIMIT 100\n    `);\n\n    const queryUrl = `https://wikipedia.org/sparql/?default-graph-uri=${endpoint}&query=${query}&format=json`;\n\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener(\"readystatechange\", readyStateChange);\n\n    function readyStateChange() {\n      if (this.readyState === 4) {\n        const data = JSON.parse(this.responseText);\n        const bindings = data.results.bindings;\n        if (bindings && bindings.length > 0) {\n          self.setState({ loading: false, result: bindings[0].comment.value });\n        } else {\n          self.setState({ loading: false, result: \"Not found.\" });\n        }\n      }\n    }\n\n    xhr.open(\"GET\", queryUrl);\n    xhr.send();\n  }\n\n  triggetNext() {\n    this.setState({ trigger: true }, () => {\n      console.log(this.props)\n      this.props.triggerNextStep();\n    });\n  }\n\n  render() {\n    const { trigger, loading, result } = this.state;\n\n    return (\n      <div className=\"dbpedia\">\n        {loading ? <Loading /> : result}\n        {!loading && (\n          <div\n            style={{\n              textAlign: \"center\",\n              marginTop: 20\n            }}\n          >\n          <h1>Fucke the po</h1>\n            {!trigger && (\n              <button onClick={() => this.triggetNext()}>Search Again</button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nDBPedia.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func\n};\n\nDBPedia.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined\n};\n\nconst ChatbotPedia = () => (\n  <ChatBot\n    steps={[\n      {\n        id: \"1\",\n        message:\n          \"Would you like to research any of the technologies in this site? ex. React JS\",\n        trigger: \"search\"\n      },\n      {\n        id: \"search\",\n        user: true,\n        trigger: \"3\"\n      },\n      {\n        id: \"3\",\n        component: <DBPedia/>,\n        waitAction: true,\n        trigger: \"1\"\n      }\n    ]}\n  />\n);\n\nexport default ChatbotPedia;\n"]},"metadata":{},"sourceType":"module"}